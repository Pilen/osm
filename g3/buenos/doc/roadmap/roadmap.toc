\contentsline {chapter}{\numberline {1}Introduction}{1}{chapter.1}
\contentsline {section}{\numberline {1.1}Expected Background Knowledge}{1}{section.1.1}
\contentsline {section}{\numberline {1.2}How to Use This Document}{2}{section.1.2}
\contentsline {section}{\numberline {1.3}\texttt {\textbf {BUENOS}}{} for teachers}{2}{section.1.3}
\contentsline {subsection}{\numberline {1.3.1}Preparing for \texttt {\textbf {BUENOS}}{} Course}{2}{subsection.1.3.1}
\contentsline {section}{\numberline {1.4}Exercises}{3}{section.1.4}
\contentsline {section}{\numberline {1.5}Contact Information}{3}{section.1.5}
\contentsline {chapter}{\numberline {2}Using Buenos}{4}{chapter.2}
\contentsline {section}{\numberline {2.1}Installation and Requirements}{4}{section.2.1}
\contentsline {section}{\numberline {2.2}Compilation}{4}{section.2.2}
\contentsline {section}{\numberline {2.3}Booting the System}{4}{section.2.3}
\contentsline {section}{\numberline {2.4}Compiling Userland Programs}{5}{section.2.4}
\contentsline {section}{\numberline {2.5}Using the Makefiles}{5}{section.2.5}
\contentsline {subsection}{\numberline {2.5.1}System Makefile}{5}{subsection.2.5.1}
\contentsline {subsection}{\numberline {2.5.2}Userland Makefile}{6}{subsection.2.5.2}
\contentsline {section}{\numberline {2.6}Using Trivial Filesystem}{6}{section.2.6}
\contentsline {section}{\numberline {2.7}Starting Processes}{7}{section.2.7}
\contentsline {chapter}{\numberline {3}Kernel Overview}{8}{chapter.3}
\contentsline {section}{\numberline {3.1}Directory Structure}{8}{section.3.1}
\contentsline {section}{\numberline {3.2}Kernel Architecture}{9}{section.3.2}
\contentsline {subsection}{\numberline {3.2.1}Threading}{10}{subsection.3.2.1}
\contentsline {subsection}{\numberline {3.2.2}Virtual Memory}{11}{subsection.3.2.2}
\contentsline {subsection}{\numberline {3.2.3}Support for Multiple Processors}{11}{subsection.3.2.3}
\contentsline {section}{\numberline {3.3}Kernel Programming}{13}{section.3.3}
\contentsline {subsection}{\numberline {3.3.1}Memory Usage}{13}{subsection.3.3.1}
\contentsline {subsection}{\numberline {3.3.2}Stacks and Contexts}{13}{subsection.3.3.2}
\contentsline {subsection}{\numberline {3.3.3}Library Functions}{14}{subsection.3.3.3}
\contentsline {subsection}{\numberline {3.3.4}Using a Console}{14}{subsection.3.3.4}
\contentsline {subsection}{\numberline {3.3.5}Busy Waiting}{14}{subsection.3.3.5}
\contentsline {subsection}{\numberline {3.3.6}Floating Point Numbers}{14}{subsection.3.3.6}
\contentsline {subsection}{\numberline {3.3.7}Naming Conventions}{14}{subsection.3.3.7}
\contentsline {subsection}{\numberline {3.3.8}Debug Printing}{14}{subsection.3.3.8}
\contentsline {paragraph}{\texttt {void {\textbf {DEBUG}} (char *debuglevelname, char *format, ...)}}{15}{section*.2}
\contentsline {subsection}{\numberline {3.3.9}C Calling Conventions}{15}{subsection.3.3.9}
\contentsline {subsection}{\numberline {3.3.10}Kernel Boot Arguments}{15}{subsection.3.3.10}
\contentsline {section}{Exercises}{15}{subsection.3.3.10}
\contentsline {chapter}{\numberline {4}Threading and Scheduling}{16}{chapter.4}
\contentsline {section}{\numberline {4.1}Threads}{16}{section.4.1}
\contentsline {subsection}{\numberline {4.1.1}Thread Table}{17}{subsection.4.1.1}
\contentsline {subsection}{\numberline {4.1.2}Thread Library}{17}{subsection.4.1.2}
\contentsline {subsubsection}{Thread Creation Functions}{17}{section*.4}
\contentsline {paragraph}{\texttt {TID\_t {\textbf {thread\_create}} (void (*func)(uint32\_t), uint32\_t arg)}}{19}{section*.5}
\contentsline {paragraph}{\texttt {void {\textbf {thread\_run}} (TID\_t t)}}{19}{section*.6}
\contentsline {subsubsection}{Self Manipulation Functions}{19}{section*.7}
\contentsline {paragraph}{\texttt {void {\textbf {thread\_switch}} (void)}}{19}{section*.8}
\contentsline {paragraph}{\texttt {void {\textbf {thread\_finish}} (void)}}{19}{section*.9}
\contentsline {paragraph}{\texttt {TID\_t {\textbf {thread\_get\_current\_thread}} (void)}}{19}{section*.10}
\contentsline {section}{\numberline {4.2}Scheduler}{20}{section.4.2}
\contentsline {paragraph}{\texttt {void {\textbf {scheduler\_schedule}} (void)}}{20}{section*.11}
\contentsline {paragraph}{\texttt {void {\textbf {scheduler\_add\_ready}} (TID\_t t)}}{21}{section*.12}
\contentsline {subsection}{\numberline {4.2.1}Idle thread}{21}{subsection.4.2.1}
\contentsline {section}{\numberline {4.3}Context Switch}{21}{section.4.3}
\contentsline {subsection}{\numberline {4.3.1}Interrupt Vectors}{22}{subsection.4.3.1}
\contentsline {subsection}{\numberline {4.3.2}Context Switching Code}{23}{subsection.4.3.2}
\contentsline {subsection}{\numberline {4.3.3}Thread Contexts}{24}{subsection.4.3.3}
\contentsline {section}{\numberline {4.4}Exception Processing in Kernel Mode}{25}{section.4.4}
\contentsline {paragraph}{\texttt {void {\textbf {kernel\_exception\_handle}} (int exception)}}{25}{section*.13}
\contentsline {section}{Exercises}{25}{Item.30}
\contentsline {chapter}{\numberline {5}Synchronization Mechanisms}{27}{chapter.5}
\contentsline {section}{\numberline {5.1}Spinlocks}{27}{section.5.1}
\contentsline {subsection}{\numberline {5.1.1}LL and SC Instructions}{27}{subsection.5.1.1}
\contentsline {subsection}{\numberline {5.1.2}Spinlock Implementation}{28}{subsection.5.1.2}
\contentsline {paragraph}{\texttt {void {\textbf {spinlock\_acquire}} (spinlock\_t *slock)}}{28}{section*.15}
\contentsline {paragraph}{\texttt {void {\textbf {spinlock\_release}} (spinlock\_t *slock)}}{28}{section*.16}
\contentsline {paragraph}{\texttt {void {\textbf {spinlock\_reset}} (spinlock\_t *slock)}}{28}{section*.17}
\contentsline {section}{\numberline {5.2}Sleep Queue}{28}{section.5.2}
\contentsline {subsection}{\numberline {5.2.1}Using the Sleep Queue}{28}{subsection.5.2.1}
\contentsline {subsection}{\numberline {5.2.2}How the Sleep Queue is Implemented}{30}{subsection.5.2.2}
\contentsline {paragraph}{\texttt {void {\textbf {sleepq\_add}} (void *resource)}}{30}{section*.18}
\contentsline {paragraph}{\texttt {void {\textbf {sleepq\_wake}} (void *resource)}}{30}{section*.19}
\contentsline {paragraph}{\texttt {void {\textbf {sleepq\_wake\_all}} (void *resource)}}{31}{section*.20}
\contentsline {paragraph}{\texttt {void {\textbf {sleepq\_init}} (void)}}{31}{section*.21}
\contentsline {section}{\numberline {5.3}Semaphores}{31}{section.5.3}
\contentsline {subsection}{\numberline {5.3.1}Semaphore Implementation}{32}{subsection.5.3.1}
\contentsline {paragraph}{\texttt {semaphore\_t * {\textbf {semaphore\_create}} (int value)}}{32}{section*.22}
\contentsline {paragraph}{\texttt {void {\textbf {semaphore\_destroy}} (semaphore\_t *sem)}}{33}{section*.23}
\contentsline {paragraph}{\texttt {void {\textbf {semaphore\_V}} (semaphore\_t *sem)}}{33}{section*.24}
\contentsline {paragraph}{\texttt {void {\textbf {semaphore\_P}} (semaphore\_t *sem)}}{33}{section*.25}
\contentsline {section}{Exercises}{33}{Item.76}
\contentsline {chapter}{\numberline {6}Userland Processes}{37}{chapter.6}
\contentsline {section}{\numberline {6.1}Process Startup}{37}{section.6.1}
\contentsline {paragraph}{\texttt {void {\textbf {process\_start}} (char *executable)}}{37}{section*.27}
\contentsline {section}{\numberline {6.2}Userland Binary Format}{38}{section.6.2}
\contentsline {paragraph}{\texttt {int {\textbf {elf\_parse\_header}} (elf\_info\_t *elf, openfile\_t file)}}{39}{section*.28}
\contentsline {section}{\numberline {6.3}Exception Handling}{41}{section.6.3}
\contentsline {paragraph}{\texttt {void {\textbf {user\_exception\_handle}} (int exception)}}{41}{section*.29}
\contentsline {section}{\numberline {6.4}System Calls}{41}{section.6.4}
\contentsline {subsection}{\numberline {6.4.1}How System Calls Work}{42}{subsection.6.4.1}
\contentsline {subsection}{\numberline {6.4.2}System Calls in \texttt {\textbf {BUENOS}}{}}{42}{subsection.6.4.2}
\contentsline {subsubsection}{Halting the Operating System}{43}{section*.30}
\contentsline {paragraph}{\texttt {void {\textbf {syscall\_halt}} (void)}}{43}{section*.31}
\contentsline {subsubsection}{File System Related}{43}{section*.32}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_open}} (const char *filename)}}{43}{section*.33}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_close}} (int filehandle)}}{43}{section*.34}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_create}} (const char *filename, int size)}}{43}{section*.35}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_delete}} (const char *filename)}}{43}{section*.36}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_seek}} (int filehandle, int offset)}}{43}{section*.37}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_read}} (int filehandle, void *buffer, int length)}}{44}{section*.38}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_write}} (int filehandle, const void *buffer, int length)}}{44}{section*.39}
\contentsline {subsubsection}{Process Related}{44}{section*.40}
\contentsline {paragraph}{\texttt {void {\textbf {syscall\_exit}} (int retval)}}{44}{section*.41}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_exec}} (const char *filename)}}{44}{section*.42}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_join}} (int pid)}}{45}{section*.43}
\contentsline {subsubsection}{Extra System Calls}{45}{section*.44}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_fork}} (void (*func)(int), int arg)}}{45}{section*.45}
\contentsline {paragraph}{\texttt {void * {\textbf {syscall\_memlimit}} (void *heap\_end)}}{45}{section*.46}
\contentsline {paragraph}{\texttt {int {\textbf {syscall\_execp}} (const char *filename, int argc, const char **argv)}}{45}{section*.47}
\contentsline {section}{Exercises}{45}{section*.47}
\contentsline {chapter}{\numberline {7}Virtual Memory}{48}{chapter.7}
\contentsline {section}{\numberline {7.1}Hardware Support for Virtual Memory}{48}{section.7.1}
\contentsline {section}{\numberline {7.2}Virtual memory initialization}{49}{section.7.2}
\contentsline {section}{\numberline {7.3}Page Pool}{49}{section.7.3}
\contentsline {paragraph}{\texttt {void {\textbf {pagepool\_init}} ()}}{49}{section*.49}
\contentsline {paragraph}{\texttt {uint32\_t {\textbf {pagepool\_get\_phys\_page}} ()}}{50}{section*.50}
\contentsline {paragraph}{\texttt {void {\textbf {pagepool\_free\_phys\_page}} (uint32\_t phys\_addr)}}{50}{section*.51}
\contentsline {section}{\numberline {7.4}Pagetables and Memory Mapping}{50}{section.7.4}
\contentsline {paragraph}{\texttt {pagetable\_t * {\textbf {vm\_create\_pagetable}} (uint32\_t asid)}}{51}{section*.52}
\contentsline {paragraph}{\texttt {void {\textbf {vm\_destroy\_pagetable}} (pagetable\_t *pagetable)}}{51}{section*.53}
\contentsline {paragraph}{\texttt {void {\textbf {vm\_map}} (pagetable\_t *pagetable, uint32\_t physaddr,\\\hspace *{1cm}uint32\_t vaddr, int dirty)}}{52}{section*.54}
\contentsline {paragraph}{\texttt {void {\textbf {vm\_unmap}} (pagetable\_t *pagetable, uint32\_t vaddr)}}{52}{section*.55}
\contentsline {paragraph}{\texttt {void {\textbf {vm\_set\_dirty}} (pagetable\_t *pagetable, uint32\_t vaddr, int dirty)}}{52}{section*.56}
\contentsline {section}{\numberline {7.5}TLB}{52}{section.7.5}
\contentsline {subsection}{\numberline {7.5.1}TLB dual entries and ASID in MIPS32 architectures}{53}{subsection.7.5.1}
\contentsline {paragraph}{\texttt {void {\textbf {tlb\_load\_exception}} (void)}}{53}{section*.57}
\contentsline {paragraph}{\texttt {void {\textbf {tlb\_store\_exception}} (void)}}{53}{section*.58}
\contentsline {paragraph}{\texttt {void {\textbf {tlb\_modified\_exception}} (void)}}{53}{section*.59}
\contentsline {subsection}{\numberline {7.5.2}TLB miss exception, Load reference}{53}{subsection.7.5.2}
\contentsline {subsection}{\numberline {7.5.3}TLB miss exception, Store reference}{53}{subsection.7.5.3}
\contentsline {subsection}{\numberline {7.5.4}TLB modified exception}{53}{subsection.7.5.4}
\contentsline {subsection}{\numberline {7.5.5}TLB wrapper functions in \texttt {\textbf {BUENOS}}{}}{53}{subsection.7.5.5}
\contentsline {paragraph}{\texttt {void {\textbf {\_tlb\_get\_exception\_state}} (tlb\_exception\_state\_t *state)}}{55}{section*.60}
\contentsline {paragraph}{\texttt {void {\textbf {\_tlb\_set\_asid}} (uint32\_t asid)}}{55}{section*.61}
\contentsline {paragraph}{\texttt {uint32\_t {\textbf {\_tlb\_get\_maxindex}} (void)}}{55}{section*.62}
\contentsline {paragraph}{\texttt {int {\textbf {\_tlb\_probe}} (tlb\_entry\_t *entry)}}{55}{section*.63}
\contentsline {paragraph}{\texttt {int {\textbf {\_tlb\_read}} (tlb\_entry\_t *entries, uint32\_t index, uint32\_t num)}}{56}{section*.64}
\contentsline {paragraph}{\texttt {int {\textbf {\_tlb\_write}} (tlb\_entry\_t *entries, uint32\_t index, uint32\_t num)}}{56}{section*.65}
\contentsline {paragraph}{\texttt {void {\textbf {\_tlb\_write\_random}} (tlb\_entry\_t *entry)}}{56}{section*.66}
\contentsline {paragraph}{\texttt {void {\textbf {tlb\_fill}} (pagetable\_t *pagetable)}}{57}{section*.67}
\contentsline {section}{Exercises}{57}{Item.156}
\contentsline {chapter}{\numberline {8}Filesystem}{59}{chapter.8}
\contentsline {section}{\numberline {8.1}Filesystem Conventions}{59}{section.8.1}
\contentsline {section}{\numberline {8.2}Filesystem Layers}{59}{section.8.2}
\contentsline {section}{\numberline {8.3}Virtual Filesystem}{60}{section.8.3}
\contentsline {subsection}{\numberline {8.3.1}Return Values}{60}{subsection.8.3.1}
\contentsline {subsection}{\numberline {8.3.2}Limits}{61}{subsection.8.3.2}
\contentsline {subsection}{\numberline {8.3.3}Internal Data Structures}{62}{subsection.8.3.3}
\contentsline {subsection}{\numberline {8.3.4}VFS Operations}{62}{subsection.8.3.4}
\contentsline {paragraph}{\texttt {void {\textbf {vfs\_init}} (void)}}{62}{section*.69}
\contentsline {paragraph}{\texttt {void {\textbf {vfs\_deinit}} (void)}}{63}{section*.70}
\contentsline {paragraph}{\texttt {static int {\textbf {vfs\_start\_op}} (void)}}{63}{section*.71}
\contentsline {paragraph}{\texttt {static void {\textbf {vfs\_end\_op}} (void)}}{63}{section*.72}
\contentsline {subsection}{\numberline {8.3.5}File Operations}{64}{subsection.8.3.5}
\contentsline {paragraph}{\texttt {openfile\_t {\textbf {vfs\_open}} (char *pathname)}}{64}{section*.73}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_close}} (openfile\_t file)}}{64}{section*.74}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_seek}} (openfile\_t file, int seek\_position)}}{65}{section*.75}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_read}} (openfile\_t file, void *buffer, int bufsize)}}{65}{section*.76}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_write}} (openfile\_t file, void *buffer, int datasize)}}{66}{section*.77}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_create}} (char *pathname, int size)}}{66}{section*.78}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_remove}} (char *pathname)}}{67}{section*.79}
\contentsline {subsection}{\numberline {8.3.6}Filesystem Operations}{67}{subsection.8.3.6}
\contentsline {paragraph}{\texttt {void {\textbf {vfs\_mount\_all}} (void)}}{67}{section*.80}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_mount\_fs}} (gbd\_t *disk, char *volumename)}}{68}{section*.81}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_mount}} (fs\_t *fs, char *name)}}{68}{section*.82}
\contentsline {paragraph}{\texttt {int {\textbf {vfs\_getfree}} (char *filesystem)}}{69}{section*.83}
\contentsline {subsection}{\numberline {8.3.7}Filesystem Driver Interface}{69}{subsection.8.3.7}
\contentsline {paragraph}{\texttt {fs\_t * {\textbf {filesystems\_try\_all}} (gbd\_t *disk)}}{71}{section*.84}
\contentsline {section}{\numberline {8.4}Trivial Filesystem}{72}{section.8.4}
\contentsline {subsection}{\numberline {8.4.1}TFS Driver Module}{73}{subsection.8.4.1}
\contentsline {paragraph}{\texttt {fs\_t * {\textbf {tfs\_init}} (gbd\_t *disk)}}{73}{section*.85}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_unmount}} (fs\_t *fs)}}{74}{section*.86}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_open}} (fs\_t *fs, char *filename)}}{74}{section*.87}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_close}} (fs\_t *fs, int fileid)}}{74}{section*.88}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_create}} (fs\_t *fs, char *filename, int size)}}{74}{section*.89}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_remove}} (fs\_t *fs, char *filename)}}{75}{section*.90}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_read}} (fs\_t *fs, int fileid, void *buffer, int bufsize,\\\hspace *{1cm}int offset)}}{75}{section*.91}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_write}} (fs\_t *fs, int fileid, void *buffer, int datasize,\\\hspace *{1cm}int offset)}}{76}{section*.92}
\contentsline {paragraph}{\texttt {int {\textbf {tfs\_getfree}} (fs\_t *fs)}}{76}{section*.93}
\contentsline {section}{Exercises}{77}{Item.337}
\contentsline {chapter}{\numberline {9}Networking}{79}{chapter.9}
\contentsline {section}{\numberline {9.1}Network Services}{79}{section.9.1}
\contentsline {subsubsection}{Upper Level Protocols}{80}{section*.95}
\contentsline {paragraph}{\texttt {int {\textbf {frame\_handler}} (network\_address\_t source,\\\hspace *{1cm}network\_address\_t destination, uint32\_t protocol\_id,\\\hspace *{1cm}void *payload)}}{80}{section*.96}
\contentsline {subsubsection}{Initialization}{80}{section*.97}
\contentsline {paragraph}{\texttt {void {\textbf {network\_init}} (void)}}{81}{section*.98}
\contentsline {subsubsection}{Receive Service Thread}{81}{section*.99}
\contentsline {paragraph}{\texttt {void {\textbf {network\_receive\_thread}} (uint32\_t interface)}}{81}{section*.100}
\contentsline {paragraph}{\texttt {static int {\textbf {network\_receive\_frame}} (network\_frame\_t *frame)}}{81}{section*.101}
\contentsline {subsubsection}{Service API}{81}{section*.102}
\contentsline {paragraph}{\texttt {network\_address\_t {\textbf {network\_get\_source\_address}} (int n)}}{82}{section*.103}
\contentsline {paragraph}{\texttt {network\_address\_t {\textbf {network\_get\_broadcast\_address}} (void)}}{82}{section*.104}
\contentsline {paragraph}{\texttt {network\_address\_t {\textbf {network\_get\_loopback\_address}} (void)}}{82}{section*.105}
\contentsline {paragraph}{\texttt {int {\textbf {network\_get\_mtu}} (network\_address\_t local\_address)}}{82}{section*.106}
\contentsline {paragraph}{\texttt {int {\textbf {network\_send}} (network\_address\_t source,\\\hspace *{1cm}network\_address\_t destination, uint32\_t protocol\_id, int length,\\\hspace *{1cm}void *buffer)}}{82}{section*.107}
\contentsline {paragraph}{\texttt {static int {\textbf {network\_send\_interface}} (int interface,\\\hspace *{1cm}network\_address\_t destination, network\_frame\_t *frame)}}{83}{section*.108}
\contentsline {paragraph}{\texttt {void {\textbf {network\_free\_frame}} (void *frame)}}{83}{section*.109}
\contentsline {section}{\numberline {9.2}Packet Oriented Transport Protocol}{83}{section.9.2}
\contentsline {subsection}{\numberline {9.2.1}Sockets}{84}{subsection.9.2.1}
\contentsline {paragraph}{\texttt {void {\textbf {socket\_init}} (void)}}{84}{section*.110}
\contentsline {paragraph}{\texttt {sock\_t {\textbf {socket\_open}} (uint8\_t protocol, uint16\_t port)}}{84}{section*.111}
\contentsline {paragraph}{\texttt {void {\textbf {socket\_close}} (sock\_t socket)}}{85}{section*.112}
\contentsline {subsection}{\numberline {9.2.2}POP-Specific Structures and Functions}{85}{subsection.9.2.2}
\contentsline {paragraph}{\texttt {void {\textbf {pop\_init}} (void)}}{86}{section*.113}
\contentsline {paragraph}{\texttt {int {\textbf {pop\_push\_frame}} (network\_address\_t fromaddr, \\\hspace *{1cm}network\_address\_t toaddr, uint32\_t protocol\_id, void *frame)}}{86}{section*.114}
\contentsline {paragraph}{\texttt {void {\textbf {pop\_service\_thread}} (uint32\_t dummy)}}{87}{section*.115}
\contentsline {paragraph}{\texttt {int {\textbf {socket\_sendto}} (sock\_t s, network\_address\_t addr, uint16\_t dport,\\\hspace *{1cm}void *buf, int size)}}{88}{section*.116}
\contentsline {paragraph}{\texttt {int {\textbf {socket\_recvfrom}} (sock\_t s, network\_address\_t *addr,\\\hspace *{1cm}uint16\_t *sport, void *buf, int maxlength, int *length)}}{88}{section*.117}
\contentsline {section}{\numberline {9.3}Stream Oriented Protocol API}{89}{section.9.3}
\contentsline {paragraph}{\texttt {int {\textbf {socket\_connect}} (sock\_t s, network\_address\_t addr, int port)}}{89}{section*.118}
\contentsline {paragraph}{\texttt {void {\textbf {socket\_listen}} (sock\_t s)}}{89}{section*.119}
\contentsline {paragraph}{\texttt {int {\textbf {socket\_read}} (sock\_t s, void *buf, int length)}}{89}{section*.120}
\contentsline {paragraph}{\texttt {int {\textbf {socket\_write}} (sock\_t s, void *buf, int length)}}{89}{section*.121}
\contentsline {section}{Exercises}{90}{section*.121}
\contentsline {chapter}{\numberline {10}Device Drivers}{91}{chapter.10}
\contentsline {section}{\numberline {10.1}Interrupt Handlers}{92}{section.10.1}
\contentsline {paragraph}{\texttt {void {\textbf {interrupt\_register}} (uint32\_t irq, void (*handler)(device\_t *),\\\hspace *{1cm}device\_t device)}}{92}{section*.123}
\contentsline {paragraph}{\texttt {void {\textbf {interrupt\_handle}} (uint32\_t cause)}}{92}{section*.124}
\contentsline {section}{\numberline {10.2}Device Abstraction Layers}{93}{section.10.2}
\contentsline {subsection}{\numberline {10.2.1}Device Driver Implementor's Checklist}{93}{subsection.10.2.1}
\contentsline {subsection}{\numberline {10.2.2}Device Driver Interface}{94}{subsection.10.2.2}
\contentsline {paragraph}{\texttt {void {\textbf {device\_init}} (void)}}{94}{section*.125}
\contentsline {paragraph}{\texttt {device\_t * {\textbf {device\_get}} (uint32\_t typecode, uint32\_t n)}}{96}{section*.126}
\contentsline {subsection}{\numberline {10.2.3}Generic Character Device}{96}{subsection.10.2.3}
\contentsline {subsection}{\numberline {10.2.4}Generic Block Device}{96}{subsection.10.2.4}
\contentsline {subsection}{\numberline {10.2.5}Generic Network Device}{99}{subsection.10.2.5}
\contentsline {section}{\numberline {10.3}Drivers}{99}{section.10.3}
\contentsline {subsection}{\numberline {10.3.1}Polling TTY driver}{99}{subsection.10.3.1}
\contentsline {paragraph}{\texttt {void {\textbf {polltty\_init}} (void)}}{99}{section*.127}
\contentsline {paragraph}{\texttt {int {\textbf {polltty\_getchar}} (void)}}{99}{section*.128}
\contentsline {paragraph}{\texttt {void {\textbf {polltty\_putchar}} (char c)}}{101}{section*.129}
\contentsline {subsection}{\numberline {10.3.2}Interrupt driven TTY driver}{101}{subsection.10.3.2}
\contentsline {paragraph}{\texttt {device\_t * {\textbf {tty\_init}} (io\_descriptor\_t *desc)}}{101}{section*.130}
\contentsline {paragraph}{\texttt {void {\textbf {tty\_interrupt\_handle}} (device\_t *device)}}{101}{section*.131}
\contentsline {paragraph}{\texttt {static int {\textbf {tty\_write}} (gcd\_t *gcd, void *buf, int len)}}{102}{section*.132}
\contentsline {paragraph}{\texttt {static int {\textbf {tty\_read}} (gcd\_t *gcd, void *buf, int len)}}{102}{section*.133}
\contentsline {subsection}{\numberline {10.3.3}Network driver}{103}{subsection.10.3.3}
\contentsline {subsection}{\numberline {10.3.4}Disk driver}{103}{subsection.10.3.4}
\contentsline {paragraph}{\texttt {device\_t {\textbf {disk\_init}} (io\_descriptor\_t *desc)}}{103}{section*.134}
\contentsline {paragraph}{\texttt {static void {\textbf {disk\_interrupt\_handle}} (device\_t *device)}}{104}{section*.135}
\contentsline {paragraph}{\texttt {static void {\textbf {disk\_next\_request}} (gbd\_t *gbd)}}{105}{section*.136}
\contentsline {paragraph}{\texttt {static int {\textbf {disk\_read\_block}} (gbd\_t *gbd, gbd\_request\_t *request)}}{105}{section*.137}
\contentsline {paragraph}{\texttt {static int {\textbf {disk\_write\_block}} (gbd\_t *gbd, gbd\_request\_t *request)}}{105}{section*.138}
\contentsline {paragraph}{\texttt {static int {\textbf {disk\_submit\_request}} (gbd\_t *gbd, gbd\_request\_t *request)}}{105}{section*.139}
\contentsline {paragraph}{\texttt {static uint32\_t {\textbf {disk\_block\_size}} (gbd\_t *gbd)}}{106}{section*.140}
\contentsline {paragraph}{\texttt {static uint32\_t {\textbf {disk\_total\_blocks}} (gbd\_t *gbd)}}{106}{section*.141}
\contentsline {subsubsection}{Disk Scheduler}{107}{section*.142}
\contentsline {paragraph}{\texttt {void {\textbf {disksched\_schedule}} (volatile gbd\_request\_t **queue, \\\hspace *{1cm}gbd\_request\_t *request)}}{107}{section*.143}
\contentsline {subsection}{\numberline {10.3.5}Timer driver}{107}{subsection.10.3.5}
\contentsline {paragraph}{\texttt {void {\textbf {timer\_set\_ticks}} (uint32\_t ticks)}}{107}{section*.144}
\contentsline {paragraph}{\texttt { {\textbf {\_timer\_set\_ticks}} (A0)}}{107}{section*.145}
\contentsline {subsection}{\numberline {10.3.6}Metadevice Drivers}{108}{subsection.10.3.6}
\contentsline {subsubsection}{Meminfo}{108}{section*.146}
\contentsline {paragraph}{\texttt {device\_t * {\textbf {meminfo\_init}} (io\_descriptor\_t *desc)}}{108}{section*.147}
\contentsline {paragraph}{\texttt {uint32\_t {\textbf {meminfo\_get\_pages}} (void)}}{108}{section*.148}
\contentsline {subsubsection}{RTC}{108}{section*.149}
\contentsline {paragraph}{\texttt {device\_t * {\textbf {rtc\_init}} (io\_descriptor\_t *desc)}}{108}{section*.150}
\contentsline {paragraph}{\texttt {uint32\_t {\textbf {rtc\_get\_msec}} (void)}}{108}{section*.151}
\contentsline {paragraph}{\texttt {uint32\_t {\textbf {rtc\_get\_clockspeed}} (void)}}{108}{section*.152}
\contentsline {subsubsection}{Shutdown}{108}{section*.153}
\contentsline {paragraph}{\texttt {device\_t * {\textbf {shutdown\_init}} (io\_descriptor\_t *desc)}}{108}{section*.154}
\contentsline {paragraph}{\texttt {void {\textbf {shutdown}} (uint32\_t magic)}}{109}{section*.155}
\contentsline {subsubsection}{CPU Status}{109}{section*.156}
\contentsline {paragraph}{\texttt {device\_t * {\textbf {cpustatus\_init}} (io\_descriptor\_t *desc)}}{109}{section*.157}
\contentsline {paragraph}{\texttt {int {\textbf {cpustatus\_count}} ()}}{109}{section*.158}
\contentsline {paragraph}{\texttt {void {\textbf {cpustatus\_generate\_irq}} (device\_t *dev)}}{109}{section*.159}
\contentsline {paragraph}{\texttt {void {\textbf {cpustatus\_interrupt\_handle}} (device\_t *dev)}}{109}{section*.160}
\contentsline {section}{Exercises}{109}{section*.160}
\contentsline {chapter}{\numberline {11}Booting and Initializing Hardware}{111}{chapter.11}
\contentsline {section}{\numberline {11.1}In the Beginning There was \texttt {\_boot.S} \dots }{111}{section.11.1}
\contentsline {section}{\numberline {11.2}Hardware and Kernel Initialization}{111}{section.11.2}
\contentsline {section}{\numberline {11.3}System Start-up}{112}{section.11.3}
\contentsline {chapter}{\numberline {A}Kernel Boot Arguments}{113}{appendix.A}
\contentsline {paragraph}{\texttt {char * {\textbf {bootargs\_get}} (char *key)}}{113}{section*.162}
\contentsline {chapter}{\numberline {B}Kernel Configuration Settings}{114}{appendix.B}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_THREADS}}{114}{section*.163}
\contentsline {paragraph}{\texttt {CONFIG\_THREAD\_STACKSIZE}}{114}{section*.164}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_CPUS}}{114}{section*.165}
\contentsline {paragraph}{\texttt {CONFIG\_SCHEDULER\_TIMESLICE}}{114}{section*.166}
\contentsline {paragraph}{\texttt {CONFIG\_BOOTARGS\_MAX}}{115}{section*.167}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_SEMAPHORES}}{115}{section*.168}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_DEVICES}}{115}{section*.169}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_FILESYSTEMS}}{115}{section*.170}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_OPEN\_FILES}}{115}{section*.171}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_OPEN\_SOCKETS}}{115}{section*.172}
\contentsline {paragraph}{\texttt {CONFIG\_POP\_QUEUE\_SIZE}}{115}{section*.173}
\contentsline {paragraph}{\texttt {CONFIG\_POP\_QUEUE\_MIN\_AGE}}{115}{section*.174}
\contentsline {paragraph}{\texttt {CONFIG\_MAX\_GNDS}}{115}{section*.175}
\contentsline {paragraph}{\texttt {CONFIG\_USERLAND\_STACK\_SIZE}}{116}{section*.176}
\contentsline {chapter}{\numberline {C}Example \texttt {\textbf {YAMS}}{} Configurations}{117}{appendix.C}
\contentsline {section}{\numberline {C.1}Disk}{117}{section.C.1}
\contentsline {chapter}{Bibliography}{118}{section*.177}
\contentsline {chapter}{Index}{119}{section*.179}
